// <auto-generated />
using System;
using G1_ee_groep1_palamedes.SH_MVL.API.Data;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace G1_ee_groep1_palamedes.SH_MVL.API.Migrations
{
    [DbContext(typeof(DataContext<IdentityUser>))]
    [Migration("20191128184903_NewdbMigration")]
    partial class NewdbMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("G1_ee_groep1_palamedes.SH_MVL.API.Models.Art", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Arts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ArtistId = 1L,
                            CategoryId = 1L,
                            Created = new DateTime(2019, 11, 28, 19, 49, 2, 381, DateTimeKind.Local).AddTicks(7759),
                            Description = "Dit is een nachtegaal",
                            ImageName = "vogel.jpg",
                            Name = "Nachtegaal",
                            Price = 3759.99m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            ArtistId = 1L,
                            CategoryId = 2L,
                            Created = new DateTime(2019, 11, 28, 19, 49, 2, 385, DateTimeKind.Local).AddTicks(4312),
                            Description = "dat was dit een",
                            ImageName = "vaas.jpg",
                            Name = "Vaas",
                            Price = 6739.93m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            ArtistId = 1L,
                            CategoryId = 3L,
                            Created = new DateTime(2019, 11, 28, 19, 49, 2, 385, DateTimeKind.Local).AddTicks(4505),
                            Description = "dit egel een was",
                            ImageName = "egel.jpg",
                            Name = "Egel",
                            Price = 6044.74m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            ArtistId = 1L,
                            CategoryId = 4L,
                            Created = new DateTime(2019, 11, 28, 19, 49, 2, 385, DateTimeKind.Local).AddTicks(4513),
                            Description = "dit is trap een",
                            ImageName = "trap.jpg",
                            Name = "Trap",
                            Price = 1236.66m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            ArtistId = 2L,
                            CategoryId = 5L,
                            Created = new DateTime(2019, 11, 28, 19, 49, 2, 385, DateTimeKind.Local).AddTicks(4517),
                            Description = "messen dit is een ",
                            ImageName = "messen.jpg",
                            Name = "Messen",
                            Price = 9765.12m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            ArtistId = 2L,
                            CategoryId = 4L,
                            Created = new DateTime(2019, 11, 28, 19, 49, 2, 385, DateTimeKind.Local).AddTicks(4521),
                            Description = "een is stenen dit",
                            ImageName = "stenen.jpg",
                            Name = "Stenen",
                            Price = 2343.85m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            ArtistId = 2L,
                            CategoryId = 2L,
                            Created = new DateTime(2019, 11, 28, 19, 49, 2, 385, DateTimeKind.Local).AddTicks(4525),
                            Description = "abstract dit een zijn",
                            ImageName = "abstract.jpg",
                            Name = "Abstract",
                            Price = 9778.59m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8L,
                            ArtistId = 2L,
                            CategoryId = 3L,
                            Created = new DateTime(2019, 11, 28, 19, 49, 2, 385, DateTimeKind.Local).AddTicks(4529),
                            Description = "is sloten een dit",
                            ImageName = "sloten.jpg",
                            Name = "Sloten",
                            Price = 3305.63m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9L,
                            ArtistId = 2L,
                            CategoryId = 1L,
                            Created = new DateTime(2019, 11, 28, 19, 49, 2, 385, DateTimeKind.Local).AddTicks(4533),
                            Description = "een boor dit is",
                            ImageName = "boor.jpg",
                            Name = "Boor",
                            Price = 8432.34m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10L,
                            ArtistId = 2L,
                            CategoryId = 2L,
                            Created = new DateTime(2019, 11, 28, 19, 49, 2, 385, DateTimeKind.Local).AddTicks(4537),
                            Description = "circle dat geweest een",
                            ImageName = "circle.jpg",
                            Name = "Circle",
                            Price = 5943.54m,
                            Updated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("G1_ee_groep1_palamedes.SH_MVL.API.Models.Artist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArtistName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ArtistName = "Pablito",
                            Dob = new DateTime(2019, 11, 28, 19, 49, 2, 385, DateTimeKind.Local).AddTicks(5151),
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            ArtistName = "Jenny",
                            Dob = new DateTime(2019, 11, 28, 19, 49, 2, 385, DateTimeKind.Local).AddTicks(6236),
                            UserId = "2"
                        });
                });

            modelBuilder.Entity("G1_ee_groep1_palamedes.SH_MVL.API.Models.BearerHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BearerToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BearerHistories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BearerToken = "qsdfsdfùqsdlfùqsdmlfùmlsdf",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            BearerToken = "qsdfsdfùqsdlfùqsdmlfùmlsdf",
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("G1_ee_groep1_palamedes.SH_MVL.API.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Schilderkunst"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Fotografie"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Grafiek"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Beeldhouwkunst"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "ModerneMedia"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Filmkunst"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "3d601019-58d9-4428-ab4a-ce2546509634",
                            Email = "de__manu09@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "675d13fc79dc2b90de05b11b36ec388a",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c23fe37-7cad-4bd2-bd81-b8e2d5b7f252",
                            TwoFactorEnabled = true,
                            UserName = "manu"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "0d1f6107-dc52-40a9-abfe-ecd6b6c490aa",
                            Email = "random@mailinator.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "754f4789adeac685009905e3a5b9c6ef",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edc38cb5-a64a-45c9-ae62-f33c4013e3bc",
                            TwoFactorEnabled = true,
                            UserName = "VanGimst"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 1,
                            ConcurrencyStamp = "7bd7e4e9-5c40-4eb8-a994-ec7a5a3c359a",
                            Email = "bob@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "2acba7f51acfd4fd5102ad090fc612ee",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c3cba4f2-bbad-4700-8f35-848463bb0958",
                            TwoFactorEnabled = false,
                            UserName = "bob"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("G1_ee_groep1_palamedes.SH_MVL.API.Models.Art", b =>
                {
                    b.HasOne("G1_ee_groep1_palamedes.SH_MVL.API.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("G1_ee_groep1_palamedes.SH_MVL.API.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("G1_ee_groep1_palamedes.SH_MVL.API.Models.Artist", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("G1_ee_groep1_palamedes.SH_MVL.API.Models.BearerHistory", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
